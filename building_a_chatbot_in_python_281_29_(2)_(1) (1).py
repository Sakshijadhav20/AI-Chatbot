# -*- coding: utf-8 -*-
"""Building_a_chatbot_in_Python_281_29 (2) (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PQZWxVMk4VUSecemFAJYEZzPPAQQji7O
"""

#Proprietary content. Â© Great Learning. All Rights Reserved. Unauthorized use or distribution prohibited.

"""**Importing the required libraries**"""

import numpy as np
import nltk
import string
import random

"""**Importing and reading the corpus**"""

f=open('AI WIKIPEDIA 2.txt','r',errors = 'ignore')
raw_doc=f.read()
raw_doc=raw_doc.lower() #Converts text to lowercase
nltk.download('punkt') #Using the Punkt tokenizer
nltk.download('wordnet') #Using the WordNet dictionary
sent_tokens = nltk.sent_tokenize(raw_doc) #Converts doc to list of sentences 
word_tokens = nltk.word_tokenize(raw_doc) #Converts doc to list of words

"""**Example of sentance tokens**"""

sent_tokens[:2]

"""**Example of word tokens**"""

word_tokens[:5]

"""**Text preprocessing**"""

lemmer = nltk.stem.WordNetLemmatizer()
#WordNet is a semantically-oriented dictionary of English included in NLTK.
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)
def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

"""**Defining the greeting function**"""

GREET_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey")
GREET_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]
def greet(sentence):
 
    for word in sentence.split():
        if word.lower() in GREET_INPUTS:
            return random.choice(GREET_RESPONSES)

"""**Response generation**"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def response(user_response):
  robo1_response=''
  TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
  tfidf = TfidfVec.fit_transform(sent_tokens)
  vals = cosine_similarity(tfidf[-1], tfidf)
  idx=vals.argsort()[0][-2]
  flat = vals.flatten()
  flat.sort()
  req_tfidf = flat[-2]
  if(req_tfidf==0):
    robo1_response=robo1_response+"I am sorry! I don't understand you"
    return robo1_response
  else:
    robo1_response = robo1_response+sent_tokens[idx]
    return robo1_response

"""**Defining conversation start/end protocols**"""



flag=True
print("HERMAS: My name is RISHABH. Let's have a conversation! Also, if you want to exit any time, just type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("HERMAS: You are welcome..")
        else:
          if(user_response =='what is ai' or user_response =='what is artificial intelligence' or user_response =='ai'):
            print("Artificial intelligence is the simulation of human intelligence processes by machines, especially computer systems. Specific applications of AI include expert systems, natural language processing, speech recognition and machine vision.")
          else:
            if(user_response =='Advantages of AI' or user_response =='Advantages of Artificial Intelligence'):
                  print("1.AI drives down the time taken to perform a task.2. It enables multi-tasking and eases the workload for existing resources.3.AI enables the execution of hitherto complex tasks without significant cost outlays.4.AI operates 24x7 without interruption or breaks and has no downtime5.AI augments the capabilities of differently abled individuals6.AI has mass market potential, it can be deployed across industries.7.AI facilitates decision-making by making the process faster and smarter")
            else:
              if(user_response=='examples of ai'):
                print("1.Manufacturing robots.2.Self-driving cars.3.Smart assistants.4.Proactive healthcare management.5.Disease mapping.")
              else:
                if(greet(user_response)!=None):
                      print("HERMAS: "+greet(user_response))
                else:
                      sent_tokens.append(user_response)
                      word_tokens=word_tokens+nltk.word_tokenize(user_response)
                      final_words=list(set(word_tokens))
                      print("HERMAS: ",end="")
                      print(response(user_response))
                      sent_tokens.remove(user_response)
    else:
        flag=False
        print("BOT: Goodbye! Take care <3 ")

